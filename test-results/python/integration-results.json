{"created": 1748615742.5160902, "duration": 1.9543123245239258, "exitcode": 0, "root": "/home/runner/work/tony_tesla/tony_tesla", "environment": {}, "summary": {"passed": 17, "total": 17, "collected": 17}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests/integration", "type": "Package"}]}, {"nodeid": "tests/integration/test_blog_handler.py::TestClient", "outcome": "passed", "result": []}, {"nodeid": "tests/integration/test_blog_handler.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_blog_handler.py::TestClient", "type": "Class"}, {"nodeid": "tests/integration/test_blog_handler.py::test_random_blog", "type": "Function", "lineno": 23}, {"nodeid": "tests/integration/test_blog_handler.py::test_blog_info", "type": "Function", "lineno": 41}, {"nodeid": "tests/integration/test_blog_handler.py::test_read_blog_post", "type": "Function", "lineno": 70}, {"nodeid": "tests/integration/test_blog_handler.py::test_random_blog_url", "type": "Function", "lineno": 109}, {"nodeid": "tests/integration/test_blog_handler.py::test_blog_search", "type": "Function", "lineno": 126}]}, {"nodeid": "tests/integration/test_tony_server.py::TestClient", "outcome": "passed", "result": []}, {"nodeid": "tests/integration/test_tony_server.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_tony_server.py::TestClient", "type": "Class"}, {"nodeid": "tests/integration/test_tony_server.py::test_search_function", "type": "Function", "lineno": 63}, {"nodeid": "tests/integration/test_tony_server.py::test_parse_tool_call", "type": "Function", "lineno": 120}, {"nodeid": "tests/integration/test_tony_server.py::test_make_vapi_response", "type": "Function", "lineno": 129}, {"nodeid": "tests/integration/test_tony_server.py::test_blog_search", "type": "Function", "lineno": 143}, {"nodeid": "tests/integration/test_tony_server.py::test_vapi_assistant_call_input", "type": "Function", "lineno": 189}, {"nodeid": "tests/integration/test_tony_server.py::test_vapi_assistant_call_input_non_igor", "type": "Function", "lineno": 255}, {"nodeid": "tests/integration/test_tony_server.py::test_is_igor_caller", "type": "Function", "lineno": 321}, {"nodeid": "tests/integration/test_tony_server.py::test_get_caller_number", "type": "Function", "lineno": 336}, {"nodeid": "tests/integration/test_tony_server.py::test_apply_caller_restrictions", "type": "Function", "lineno": 366}, {"nodeid": "tests/integration/test_tony_server.py::test_assistant_endpoint_logs_failure", "type": "Function", "lineno": 415}, {"nodeid": "tests/integration/test_tony_server.py::test_send_text_integration", "type": "Coroutine", "lineno": 454}, {"nodeid": "tests/integration/test_tony_server.py::test_send_text_ifttt_integration", "type": "Coroutine", "lineno": 547}]}, {"nodeid": "tests/integration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_blog_handler.py", "type": "Module"}, {"nodeid": "tests/integration/test_tony_server.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/integration/test_blog_handler.py::test_random_blog", "lineno": 23, "outcome": "passed", "keywords": ["test_random_blog", "test_blog_handler.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.0008613390000107302, "outcome": "passed"}, "call": {"duration": 0.36936784399999567, "outcome": "passed", "stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '2', 'content-type': 'application/json'}\n"}, "teardown": {"duration": 0.0007901769999989483, "outcome": "passed"}}, {"nodeid": "tests/integration/test_blog_handler.py::test_blog_info", "lineno": 41, "outcome": "passed", "keywords": ["test_blog_info", "test_blog_handler.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.00043100500001003184, "outcome": "passed"}, "call": {"duration": 0.03400245599999607, "outcome": "passed", "stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '2', 'content-type': 'application/json'}\n"}, "teardown": {"duration": 0.0007568050000088533, "outcome": "passed"}}, {"nodeid": "tests/integration/test_blog_handler.py::test_read_blog_post", "lineno": 70, "outcome": "passed", "keywords": ["test_read_blog_post", "test_blog_handler.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.0004378280000025825, "outcome": "passed"}, "call": {"duration": 0.13294329000000005, "outcome": "passed", "stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '25', 'content-type': 'application/json'}\nResponse for markdown path: {'results': [{'toolCallId': 'dd6bf641-da57-4e45-9aeb-806af68b4ae3', 'result': '{\"content\": \"---\\\\nlayout: post\\\\ntitle: \\\\\"Igors Vim Tips\\\\\"\\\\npermalink: /vim\\\\nredirect_from:\\\\n  - /nvim\\\\n---\\\\n\\\\nI used Vim for years, but have now transitioned to Neovim. While most of these tips work in both editors, some are Neovim-specific. Here\\'s my collection of tips I want to practice and remember.\\\\n\\\\n{% include summarize-page.html src=\\\\\"/neovim\\\\\" %}\\\\n\\\\n<!-- prettier-ignore-start -->\\\\n<!-- vim-markdown-toc-start -->\\\\n\\\\n- [Code Changes](#code-changes)\\\\n- [Git integration](#git-integration)\\\\n\\\\n<!-- vim-markdown-toc-end -->\\\\n<!-- prettier-ignore-end -->\\\\n\\\\n### Code Changes\\\\n\\\\n- <space>rn - Rename\\\\n- yaf (yank a function) - Via TreeSitter+TreeSitter Motions\\\\n- \\\\\\\\xX -> Open Diagnostics - Via Trouble\\\\n- <space>ai auo import\\\\n- <space>code action\\\\n- <space>gd - go to definition - Via LSP\\\\n- <space>gt - go to type\\\\n- \\\\\\\\cc - Comment or uncomment\\\\n\\\\n### Git integration\\\\n\\\\n- NeoGit (Gosh I can\\'t figure this out)\\\\n- DiffViewOpen\\\\n- Telescope git_status\\\\n- Telescope git_files\\\\n\\\\nNice Telescope - Telescope git_status\\\\n\", \"markdown_path\": \"_d/vim_tips.md\"}'}]}\nResult string: {\"content\": \"---\\nlayout: post\\ntitle: \\\"Igors Vim Tips\\\"\\npermalink: /vim\\nredirect_from:\\n  - /nvim\\n---\\n\\nI used Vim for years, but have now transitioned to Neovim. While most of these tips work in both editors, some are Neovim-specific. Here's my collection of tips I want to practice and remember.\\n\\n{% include summarize-page.html src=\\\"/neovim\\\" %}\\n\\n<!-- prettier-ignore-start -->\\n<!-- vim-markdown-toc-start -->\\n\\n- [Code Changes](#code-changes)\\n- [Git integration](#git-integration)\\n\\n<!-- vim-markdown-toc-end -->\\n<!-- prettier-ignore-end -->\\n\\n### Code Changes\\n\\n- <space>rn - Rename\\n- yaf (yank a function) - Via TreeSitter+TreeSitter Motions\\n- \\\\xX -> Open Diagnostics - Via Trouble\\n- <space>ai auo import\\n- <space>code action\\n- <space>gd - go to definition - Via LSP\\n- <space>gt - go to type\\n- \\\\cc - Comment or uncomment\\n\\n### Git integration\\n\\n- NeoGit (Gosh I can't figure this out)\\n- DiffViewOpen\\n- Telescope git_status\\n- Telescope git_files\\n\\nNice Telescope - Telescope git_status\\n\", \"markdown_path\": \"_d/vim_tips.md\"}\ndict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '15', 'content-type': 'application/json'}\nResponse for URL path: {'results': [{'toolCallId': 'a5a3b8b0-76bf-4c63-bf1d-1101bcd2ba74', 'result': '{\"content\": \"---\\\\nlayout: post\\\\ntitle: \\\\\"Igors Vim Tips\\\\\"\\\\npermalink: /vim\\\\nredirect_from:\\\\n  - /nvim\\\\n---\\\\n\\\\nI used Vim for years, but have now transitioned to Neovim. While most of these tips work in both editors, some are Neovim-specific. Here\\'s my collection of tips I want to practice and remember.\\\\n\\\\n{% include summarize-page.html src=\\\\\"/neovim\\\\\" %}\\\\n\\\\n<!-- prettier-ignore-start -->\\\\n<!-- vim-markdown-toc-start -->\\\\n\\\\n- [Code Changes](#code-changes)\\\\n- [Git integration](#git-integration)\\\\n\\\\n<!-- vim-markdown-toc-end -->\\\\n<!-- prettier-ignore-end -->\\\\n\\\\n### Code Changes\\\\n\\\\n- <space>rn - Rename\\\\n- yaf (yank a function) - Via TreeSitter+TreeSitter Motions\\\\n- \\\\\\\\xX -> Open Diagnostics - Via Trouble\\\\n- <space>ai auo import\\\\n- <space>code action\\\\n- <space>gd - go to definition - Via LSP\\\\n- <space>gt - go to type\\\\n- \\\\\\\\cc - Comment or uncomment\\\\n\\\\n### Git integration\\\\n\\\\n- NeoGit (Gosh I can\\'t figure this out)\\\\n- DiffViewOpen\\\\n- Telescope git_status\\\\n- Telescope git_files\\\\n\\\\nNice Telescope - Telescope git_status\\\\n\", \"markdown_path\": \"_d/vim_tips.md\"}'}]}\nResult string for URL: {\"content\": \"---\\nlayout: post\\ntitle: \\\"Igors Vim Tips\\\"\\npermalink: /vim\\nredirect_from:\\n  - /nvim\\n---\\n\\nI used Vim for years, but have now transitioned to Neovim. While most of these tips work in both editors, some are Neovim-specific. Here's my collection of tips I want to practice and remember.\\n\\n{% include summarize-page.html src=\\\"/neovim\\\" %}\\n\\n<!-- prettier-ignore-start -->\\n<!-- vim-markdown-toc-start -->\\n\\n- [Code Changes](#code-changes)\\n- [Git integration](#git-integration)\\n\\n<!-- vim-markdown-toc-end -->\\n<!-- prettier-ignore-end -->\\n\\n### Code Changes\\n\\n- <space>rn - Rename\\n- yaf (yank a function) - Via TreeSitter+TreeSitter Motions\\n- \\\\xX -> Open Diagnostics - Via Trouble\\n- <space>ai auo import\\n- <space>code action\\n- <space>gd - go to definition - Via LSP\\n- <space>gt - go to type\\n- \\\\cc - Comment or uncomment\\n\\n### Git integration\\n\\n- NeoGit (Gosh I can't figure this out)\\n- DiffViewOpen\\n- Telescope git_status\\n- Telescope git_files\\n\\nNice Telescope - Telescope git_status\\n\", \"markdown_path\": \"_d/vim_tips.md\"}\n"}, "teardown": {"duration": 0.0007122909999992544, "outcome": "passed"}}, {"nodeid": "tests/integration/test_blog_handler.py::test_random_blog_url", "lineno": 109, "outcome": "passed", "keywords": ["test_random_blog_url", "test_blog_handler.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.00045845700000768375, "outcome": "passed"}, "call": {"duration": 0.016846938999989902, "outcome": "passed", "stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '2', 'content-type': 'application/json'}\n"}, "teardown": {"duration": 0.0007802880000014056, "outcome": "passed"}}, {"nodeid": "tests/integration/test_blog_handler.py::test_blog_search", "lineno": 126, "outcome": "passed", "keywords": ["test_blog_search", "test_blog_handler.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.0004563230000087515, "outcome": "passed"}, "call": {"duration": 0.2708979810000045, "outcome": "passed", "stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '22', 'content-type': 'application/json'}\n"}, "teardown": {"duration": 0.0007412149999908024, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_search_function", "lineno": 63, "outcome": "passed", "keywords": ["test_search_function", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.00046424800000011146, "outcome": "passed"}, "call": {"duration": 0.0048242099999953325, "outcome": "passed", "stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '173', 'content-type': 'application/json'}\nauth_line: Bearer test_pplx_key\npayload: {'model': 'sonar-pro', 'messages': [{'role': 'system', 'content': 'Be precise and concise.'}, {'role': 'user', 'content': 'What is the weather in Seattle?'}]}\nheaders: {'accept': 'application/json', 'content-type': 'application/json', 'authorization': 'Bearer test_pplx_key'}\nsearch_response.json(): {'id': '2fb30930-796a-405d-be66-12fa7f54db75', 'model': 'sonar-pro', 'created': 1742044995, 'usage': {'prompt_tokens': 12, 'completion_tokens': 356, 'total_tokens': 368}, 'object': 'chat.completion', 'choices': [{'index': 0, 'finish_reason': 'stop', 'message': {'role': 'assistant', 'content': 'The weather in Seattle is currently chilly with intervals of clouds and sun.'}}]}\nvapi_response: {'results': [{'toolCallId': 'toolu_01FDyjjUG1ig7hP9YQ6MQXhX', 'result': 'The weather in Seattle is currently chilly with intervals of clouds and sun.'}]}\n"}, "teardown": {"duration": 0.0006892490000041107, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_parse_tool_call", "lineno": 120, "outcome": "passed", "keywords": ["test_parse_tool_call", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.00044259800000645555, "outcome": "passed"}, "call": {"duration": 0.0001581159999943793, "outcome": "passed"}, "teardown": {"duration": 0.0006665359999971088, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_make_vapi_response", "lineno": 129, "outcome": "passed", "keywords": ["test_make_vapi_response", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.0003588210000060599, "outcome": "passed"}, "call": {"duration": 0.00015992900000583177, "outcome": "passed"}, "teardown": {"duration": 0.0006175639999952409, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_blog_search", "lineno": 143, "outcome": "passed", "keywords": ["test_blog_search", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.00038613200000270353, "outcome": "passed"}, "call": {"duration": 0.14123502699999335, "outcome": "passed", "stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '131', 'content-type': 'application/json'}\n"}, "teardown": {"duration": 0.0007130930000016633, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_vapi_assistant_call_input", "lineno": 189, "outcome": "passed", "keywords": ["test_vapi_assistant_call_input", "usefixtures", "pytestmark", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.000611352999996484, "outcome": "passed"}, "call": {"duration": 0.1257636710000014, "outcome": "passed", "stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '603', 'content-type': 'application/json'}\ninput: {'message': {'timestamp': 1736039875874, 'type': 'assistant-request', 'call': {'id': 'xxx-xxx', 'orgId': 'xxx-xxx', 'createdAt': '2025-01-05T01:17:55.739Z', 'updatedAt': '2025-01-05T01:17:55.739Z', 'type': 'inbound Phone Call', 'status': 'ringing', 'phoneCallProvider': 'twilio', 'phoneCallProviderId': 'xxx-xxx', 'phoneCallTransport': 'pstn', 'phoneNumberId': 'xxx-xxx', 'assistantId': None, 'squadId': None, 'customer': {'number': '+1xxx-xxx', 'phoneNumber': {'id': 'xxx-xxx', 'orgId': 'xxx-xxx', 'assistantId': None, 'number': '+1xxx-xxx', 'createdAt': '2024-04-12T16:35:14.400Z', 'updatedAt': '2024-11-27T17:14:08.833Z', 'provider': 'twilio'}}}}}\nlen(tony): 1\n"}, "teardown": {"duration": 0.0007633970000000545, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_vapi_assistant_call_input_non_igor", "lineno": 255, "outcome": "passed", "keywords": ["test_vapi_assistant_call_input_non_igor", "usefixtures", "pytestmark", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.0006055020000133027, "outcome": "passed"}, "call": {"duration": 0.1196774400000038, "outcome": "passed", "stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '606', 'content-type': 'application/json'}\ninput: {'message': {'timestamp': 1736039875874, 'type': 'assistant-request', 'call': {'id': 'xxx-xxx', 'orgId': 'xxx-xxx', 'createdAt': '2025-01-05T01:17:55.739Z', 'updatedAt': '2025-01-05T01:17:55.739Z', 'type': 'inbound Phone Call', 'status': 'ringing', 'phoneCallProvider': 'twilio', 'phoneCallProviderId': 'xxx-xxx', 'phoneCallTransport': 'pstn', 'phoneNumberId': 'xxx-xxx', 'assistantId': None, 'squadId': None, 'customer': {'number': '+11234567890', 'phoneNumber': {'id': 'xxx-xxx', 'orgId': 'xxx-xxx', 'assistantId': None, 'number': '+1xxx-xxx', 'createdAt': '2024-04-12T16:35:14.400Z', 'updatedAt': '2024-11-27T17:14:08.833Z', 'provider': 'twilio'}}}}}\nlen(tony): 1\n"}, "teardown": {"duration": 0.0008394089999939069, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_is_igor_caller", "lineno": 321, "outcome": "passed", "keywords": ["test_is_igor_caller", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.00041693999999381504, "outcome": "passed"}, "call": {"duration": 0.000861610999990603, "outcome": "passed", "stdout": "Missing 'call' key\n"}, "teardown": {"duration": 0.0006688109999970493, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_get_caller_number", "lineno": 336, "outcome": "passed", "keywords": ["test_get_caller_number", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.0003760529999965456, "outcome": "passed"}, "call": {"duration": 0.0010676859999989574, "outcome": "passed", "stdout": "Missing 'number' key\nMissing 'customer' key\nMissing 'call' key\nMissing 'message' key\nMissing 'message' key\nInput is None\n"}, "teardown": {"duration": 0.0006697419999994736, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_apply_caller_restrictions", "lineno": 366, "outcome": "passed", "keywords": ["test_apply_caller_restrictions", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.0003793090000101529, "outcome": "passed"}, "call": {"duration": 0.0003162109999976792, "outcome": "passed"}, "teardown": {"duration": 0.00063234200000295, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_assistant_endpoint_logs_failure", "lineno": 415, "outcome": "passed", "keywords": ["test_assistant_endpoint_logs_failure", "usefixtures", "pytestmark", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.0005421529999978247, "outcome": "passed"}, "call": {"duration": 0.07587939000001143, "outcome": "passed", "stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate, zstd', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '398', 'content-type': 'application/json'}\ninput: {'message': {'timestamp': 1737157773126, 'type': 'status-update', 'status': 'ended', 'endedReason': 'assistant-request-returned-invalid-assistant', 'inboundPhoneCallDebuggingArtifacts': {'error': \"Couldn't Get Assistant...\", 'assistantRequestError': 'Invalid Assistant. Errors: [\\n  \"assistant.model.All fallbackModels\\'s elements must be unique\"\\n]', 'assistantRequestResponse': {'assistant': {'name': 'Tony'}}}}}\nfailure_reason: Invalid Assistant. Errors: [\n                  \"assistant.model.All fallbackModels's elements must be unique\"\n                ]\nMissing 'call' key\nMissing 'call' key\nlen(tony): 1\n"}, "teardown": {"duration": 0.0008262949999959801, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_send_text_integration", "lineno": 454, "outcome": "passed", "keywords": ["test_send_text_integration", "asyncio", "pytestmark", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.0006657649999937121, "outcome": "passed"}, "call": {"duration": 0.01131162299999744, "outcome": "passed", "stdout": "Twilio environment check:\nTWILIO_ACCOUNT_SID exists:, TWILIO_ACCOUNT_SID in os.environ: True\nTWILIO_AUTH_TOKEN exists:, TWILIO_AUTH_TOKEN in os.environ: True\nTWILIO_FROM_NUMBER exists:, TWILIO_FROM_NUMBER in os.environ: True\n\"TWILIO_FROM_NUMBER value:\": TWILIO_FROM_NUMBER value:\nos.environ.get(TWILIO_FROM_NUMBER): +13203734339\nSending message with params:\nTo:, to_number: +12068904339\nFrom:, os.environ[TWILIO_FROM_NUMBER]: +13203734339\nText:, text: Hello, this is a test message\n\"Twilio response:\": Twilio response:\nmessage.__dict__: {'_mock_return_value': sentinel.DEFAULT, '_mock_parent': None, '_mock_name': None, '_mock_new_name': '()', '_mock_new_parent': <Mock name='Client().messages.create' id='140562007180592'>, '_mock_sealed': False, '_spec_class': None, '_spec_set': None, '_spec_signature': None, '_mock_methods': None, '_spec_asyncs': [], '_mock_children': {}, '_mock_wraps': None, '_mock_delegate': None, '_mock_called': False, '_mock_call_args': None, '_mock_call_count': 0, '_mock_call_args_list': [], '_mock_mock_calls': [], 'method_calls': [], '_mock_unsafe': False, '_mock_side_effect': None, 'sid': 'SM12345'}\nTwilio environment check:\nTWILIO_ACCOUNT_SID exists:, TWILIO_ACCOUNT_SID in os.environ: True\nTWILIO_AUTH_TOKEN exists:, TWILIO_AUTH_TOKEN in os.environ: True\nTWILIO_FROM_NUMBER exists:, TWILIO_FROM_NUMBER in os.environ: True\n\"TWILIO_FROM_NUMBER value:\": TWILIO_FROM_NUMBER value:\nos.environ.get(TWILIO_FROM_NUMBER): +13203734339\nerror_msg: Unexpected error: Connection error\n"}, "teardown": {"duration": 0.0008354019999927687, "outcome": "passed"}}, {"nodeid": "tests/integration/test_tony_server.py::test_send_text_ifttt_integration", "lineno": 547, "outcome": "passed", "keywords": ["test_send_text_ifttt_integration", "asyncio", "pytestmark", "test_tony_server.py", "integration", "tests", "tony_tesla", ""], "setup": {"duration": 0.0005348699999956352, "outcome": "passed"}, "call": {"duration": 0.025903056999993623, "outcome": "passed", "stdout": "IFTTT environment check:\nIFTTT_WEBHOOK_KEY exists:, IFTTT_WEBHOOK_KEY in os.environ: True\n\"IFTTT_WEBHOOK_SMS_EVENT exists:\": IFTTT_WEBHOOK_SMS_EVENT exists:\nIFTTT_WEBHOOK_SMS_EVENT in os.environ: True\nSending IFTTT webhook request:\n\"URL:\": URL:\nifttt_url: https://maker.ifttt.com/trigger/test_event/with/key/test_key\n\"Payload:\": Payload:\npayload: {'value1': 'Hello, this is a test message', 'value2': '+12068904339', 'value3': 'From Tony Tesla at 2025-05-30 07:35:42'}\nIFTTT response status:, response.status_code: 200\n\"IFTTT response text:\": IFTTT response text:\nresponse.text: Congratulations! You've fired the sms_event event\nIFTTT environment check:\nIFTTT_WEBHOOK_KEY exists:, IFTTT_WEBHOOK_KEY in os.environ: True\n\"IFTTT_WEBHOOK_SMS_EVENT exists:\": IFTTT_WEBHOOK_SMS_EVENT exists:\nIFTTT_WEBHOOK_SMS_EVENT in os.environ: True\nSending IFTTT webhook request:\n\"URL:\": URL:\nifttt_url: https://maker.ifttt.com/trigger/test_event/with/key/test_key\n\"Payload:\": Payload:\npayload: {'value1': 'Hello, this is a test message', 'value2': '+12068904339', 'value3': 'From Tony Tesla at 2025-05-30 07:35:42'}\nerror_msg: Failed to send webhook request: Connection failed\nIFTTT environment check:\nIFTTT_WEBHOOK_KEY exists:, IFTTT_WEBHOOK_KEY in os.environ: True\n\"IFTTT_WEBHOOK_SMS_EVENT exists:\": IFTTT_WEBHOOK_SMS_EVENT exists:\nIFTTT_WEBHOOK_SMS_EVENT in os.environ: True\nSending IFTTT webhook request:\nURL:, ifttt_url: https://maker.ifttt.com/trigger/test_event/with/key/\n\"Payload:\": Payload:\npayload: {'value1': 'Hello, this is a test message', 'value2': '+12068904339', 'value3': 'From Tony Tesla at 2025-05-30 07:35:42'}\nerror_msg: Failed to send webhook request: 404 Client Error: Not Found for url: https://maker.ifttt.com/trigger/test_event/with/key/\n"}, "teardown": {"duration": 0.0010461050000003524, "outcome": "passed"}}]}