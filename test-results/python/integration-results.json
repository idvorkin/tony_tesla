{
	"created": 1742045825.1310458,
	"duration": 1.682269811630249,
	"exitcode": 0,
	"root": "/Users/idvorkin/gits/tony_tesla",
	"environment": {},
	"summary": { "passed": 17, "total": 17, "collected": 17 },
	"collectors": [
		{
			"nodeid": "",
			"outcome": "passed",
			"result": [{ "nodeid": "tests/integration", "type": "Package" }]
		},
		{
			"nodeid": "tests/integration/test_blog_handler.py::TestClient",
			"outcome": "passed",
			"result": []
		},
		{
			"nodeid": "tests/integration/test_blog_handler.py",
			"outcome": "passed",
			"result": [
				{
					"nodeid": "tests/integration/test_blog_handler.py::TestClient",
					"type": "Class"
				},
				{
					"nodeid": "tests/integration/test_blog_handler.py::test_random_blog",
					"type": "Function",
					"lineno": 22
				},
				{
					"nodeid": "tests/integration/test_blog_handler.py::test_blog_info",
					"type": "Function",
					"lineno": 39
				},
				{
					"nodeid": "tests/integration/test_blog_handler.py::test_read_blog_post",
					"type": "Function",
					"lineno": 63
				},
				{
					"nodeid": "tests/integration/test_blog_handler.py::test_random_blog_url",
					"type": "Function",
					"lineno": 101
				},
				{
					"nodeid": "tests/integration/test_blog_handler.py::test_blog_search",
					"type": "Function",
					"lineno": 117
				}
			]
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::TestClient",
			"outcome": "passed",
			"result": []
		},
		{
			"nodeid": "tests/integration/test_tony_server.py",
			"outcome": "passed",
			"result": [
				{
					"nodeid": "tests/integration/test_tony_server.py::TestClient",
					"type": "Class"
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_search_function",
					"type": "Function",
					"lineno": 60
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_parse_tool_call",
					"type": "Function",
					"lineno": 109
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_make_vapi_response",
					"type": "Function",
					"lineno": 118
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_blog_search",
					"type": "Function",
					"lineno": 132
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_vapi_assistant_call_input",
					"type": "Function",
					"lineno": 178
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_vapi_assistant_call_input_non_igor",
					"type": "Function",
					"lineno": 244
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_is_igor_caller",
					"type": "Function",
					"lineno": 310
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_get_caller_number",
					"type": "Function",
					"lineno": 325
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_apply_caller_restrictions",
					"type": "Function",
					"lineno": 355
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_assistant_endpoint_logs_failure",
					"type": "Function",
					"lineno": 404
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_send_text_integration",
					"type": "Coroutine",
					"lineno": 443
				},
				{
					"nodeid": "tests/integration/test_tony_server.py::test_send_text_ifttt_integration",
					"type": "Coroutine",
					"lineno": 536
				}
			]
		},
		{
			"nodeid": "tests/integration",
			"outcome": "passed",
			"result": [
				{
					"nodeid": "tests/integration/test_blog_handler.py",
					"type": "Module"
				},
				{ "nodeid": "tests/integration/test_tony_server.py", "type": "Module" }
			]
		}
	],
	"tests": [
		{
			"nodeid": "tests/integration/test_blog_handler.py::test_random_blog",
			"lineno": 22,
			"outcome": "passed",
			"keywords": [
				"test_random_blog",
				"test_blog_handler.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.0002676250005606562, "outcome": "passed" },
			"call": {
				"duration": 0.4824613750097342,
				"outcome": "passed",
				"stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '2', 'content-type': 'application/json'}\n"
			},
			"teardown": { "duration": 0.0005637500144075602, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_blog_handler.py::test_blog_info",
			"lineno": 39,
			"outcome": "passed",
			"keywords": [
				"test_blog_info",
				"test_blog_handler.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.0002426670107524842, "outcome": "passed" },
			"call": {
				"duration": 0.057046250003622845,
				"outcome": "passed",
				"stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '2', 'content-type': 'application/json'}\n"
			},
			"teardown": { "duration": 0.0004899589985143393, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_blog_handler.py::test_read_blog_post",
			"lineno": 63,
			"outcome": "passed",
			"keywords": [
				"test_read_blog_post",
				"test_blog_handler.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.00047137500951066613, "outcome": "passed" },
			"call": {
				"duration": 0.104321249993518,
				"outcome": "passed",
				"stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '26', 'content-type': 'application/json'}\nResponse for markdown path: {'results': [{'toolCallId': 'bbc2030f-5ff2-42cb-94d0-e6585065a258', 'result': '{\"content\": \"---\\\\nlayout: post\\\\ntitle: \\\\\"Igors Vim Tips\\\\\"\\\\npermalink: /vim\\\\nredirect_from:\\\\n  - /nvim\\\\n---\\\\n\\\\nI used Vim for years, but have now transitioned to Neovim. While most of these tips work in both editors, some are Neovim-specific. Here\\'s my collection of tips I want to practice and remember.\\\\n\\\\n{% include summarize-page.html src=\\\\\"/neovim\\\\\" %}\\\\n\\\\n<!-- prettier-ignore-start -->\\\\n<!-- vim-markdown-toc-start -->\\\\n\\\\n- [Code Changes](#code-changes)\\\\n- [Git integration](#git-integration)\\\\n\\\\n<!-- vim-markdown-toc-end -->\\\\n<!-- prettier-ignore-end -->\\\\n\\\\n### Code Changes\\\\n\\\\n- <space>rn - Rename\\\\n- yaf (yank a function) - Via TreeSitter+TreeSitter Motions\\\\n- \\\\\\\\xX -> Open Diagnostics - Via Trouble\\\\n- <space>ai auo import\\\\n- <space>code action\\\\n- <space>gd - go to definition - Via LSP\\\\n- <space>gt - go to type\\\\n- \\\\\\\\cc - Comment or uncomment\\\\n\\\\n### Git integration\\\\n\\\\n- NeoGit (Gosh I can\\'t figure this out)\\\\n- DiffViewOpen\\\\n- Telescope git_status\\\\n- Telescope git_files\\\\n\\\\nNice Telescope - Telescope git_status\\\\n\", \"markdown_path\": \"_d/vim_tips.md\"}'}]}\nResult string: {\"content\": \"---\\nlayout: post\\ntitle: \\\"Igors Vim Tips\\\"\\npermalink: /vim\\nredirect_from:\\n  - /nvim\\n---\\n\\nI used Vim for years, but have now transitioned to Neovim. While most of these tips work in both editors, some are Neovim-specific. Here's my collection of tips I want to practice and remember.\\n\\n{% include summarize-page.html src=\\\"/neovim\\\" %}\\n\\n<!-- prettier-ignore-start -->\\n<!-- vim-markdown-toc-start -->\\n\\n- [Code Changes](#code-changes)\\n- [Git integration](#git-integration)\\n\\n<!-- vim-markdown-toc-end -->\\n<!-- prettier-ignore-end -->\\n\\n### Code Changes\\n\\n- <space>rn - Rename\\n- yaf (yank a function) - Via TreeSitter+TreeSitter Motions\\n- \\\\xX -> Open Diagnostics - Via Trouble\\n- <space>ai auo import\\n- <space>code action\\n- <space>gd - go to definition - Via LSP\\n- <space>gt - go to type\\n- \\\\cc - Comment or uncomment\\n\\n### Git integration\\n\\n- NeoGit (Gosh I can't figure this out)\\n- DiffViewOpen\\n- Telescope git_status\\n- Telescope git_files\\n\\nNice Telescope - Telescope git_status\\n\", \"markdown_path\": \"_d/vim_tips.md\"}\ndict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '16', 'content-type': 'application/json'}\nResponse for URL path: {'results': [{'toolCallId': '677fd3d8-7506-448e-adc6-d8e8caec5749', 'result': '{\"content\": \"---\\\\nlayout: post\\\\ntitle: \\\\\"Igors Vim Tips\\\\\"\\\\npermalink: /vim\\\\nredirect_from:\\\\n  - /nvim\\\\n---\\\\n\\\\nI used Vim for years, but have now transitioned to Neovim. While most of these tips work in both editors, some are Neovim-specific. Here\\'s my collection of tips I want to practice and remember.\\\\n\\\\n{% include summarize-page.html src=\\\\\"/neovim\\\\\" %}\\\\n\\\\n<!-- prettier-ignore-start -->\\\\n<!-- vim-markdown-toc-start -->\\\\n\\\\n- [Code Changes](#code-changes)\\\\n- [Git integration](#git-integration)\\\\n\\\\n<!-- vim-markdown-toc-end -->\\\\n<!-- prettier-ignore-end -->\\\\n\\\\n### Code Changes\\\\n\\\\n- <space>rn - Rename\\\\n- yaf (yank a function) - Via TreeSitter+TreeSitter Motions\\\\n- \\\\\\\\xX -> Open Diagnostics - Via Trouble\\\\n- <space>ai auo import\\\\n- <space>code action\\\\n- <space>gd - go to definition - Via LSP\\\\n- <space>gt - go to type\\\\n- \\\\\\\\cc - Comment or uncomment\\\\n\\\\n### Git integration\\\\n\\\\n- NeoGit (Gosh I can\\'t figure this out)\\\\n- DiffViewOpen\\\\n- Telescope git_status\\\\n- Telescope git_files\\\\n\\\\nNice Telescope - Telescope git_status\\\\n\", \"markdown_path\": \"_d/vim_tips.md\"}'}]}\nResult string for URL: {\"content\": \"---\\nlayout: post\\ntitle: \\\"Igors Vim Tips\\\"\\npermalink: /vim\\nredirect_from:\\n  - /nvim\\n---\\n\\nI used Vim for years, but have now transitioned to Neovim. While most of these tips work in both editors, some are Neovim-specific. Here's my collection of tips I want to practice and remember.\\n\\n{% include summarize-page.html src=\\\"/neovim\\\" %}\\n\\n<!-- prettier-ignore-start -->\\n<!-- vim-markdown-toc-start -->\\n\\n- [Code Changes](#code-changes)\\n- [Git integration](#git-integration)\\n\\n<!-- vim-markdown-toc-end -->\\n<!-- prettier-ignore-end -->\\n\\n### Code Changes\\n\\n- <space>rn - Rename\\n- yaf (yank a function) - Via TreeSitter+TreeSitter Motions\\n- \\\\xX -> Open Diagnostics - Via Trouble\\n- <space>ai auo import\\n- <space>code action\\n- <space>gd - go to definition - Via LSP\\n- <space>gt - go to type\\n- \\\\cc - Comment or uncomment\\n\\n### Git integration\\n\\n- NeoGit (Gosh I can't figure this out)\\n- DiffViewOpen\\n- Telescope git_status\\n- Telescope git_files\\n\\nNice Telescope - Telescope git_status\\n\", \"markdown_path\": \"_d/vim_tips.md\"}\n"
			},
			"teardown": { "duration": 0.00047470800927840173, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_blog_handler.py::test_random_blog_url",
			"lineno": 101,
			"outcome": "passed",
			"keywords": [
				"test_random_blog_url",
				"test_blog_handler.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.00032745799398981035, "outcome": "passed" },
			"call": {
				"duration": 0.043551041977480054,
				"outcome": "passed",
				"stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '2', 'content-type': 'application/json'}\n"
			},
			"teardown": { "duration": 0.00037112500285729766, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_blog_handler.py::test_blog_search",
			"lineno": 117,
			"outcome": "passed",
			"keywords": [
				"test_blog_search",
				"test_blog_handler.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.0003128749958705157, "outcome": "passed" },
			"call": {
				"duration": 0.31363358299131505,
				"outcome": "passed",
				"stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '23', 'content-type': 'application/json'}\n"
			},
			"teardown": { "duration": 0.00017820901121012866, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_search_function",
			"lineno": 60,
			"outcome": "passed",
			"keywords": [
				"test_search_function",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.00011866699787788093, "outcome": "passed" },
			"call": {
				"duration": 0.0023235419939737767,
				"outcome": "passed",
				"stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '184', 'content-type': 'application/json'}\nauth_line: Bearer test_pplx_key\npayload: {'model': 'sonar-pro', 'messages': [{'role': 'system', 'content': 'Be precise and concise.'}, {'role': 'user', 'content': 'What is the weather in Seattle?'}]}\nheaders: {'accept': 'application/json', 'content-type': 'application/json', 'authorization': 'Bearer test_pplx_key'}\nsearch_response.json(): {'id': '2fb30930-796a-405d-be66-12fa7f54db75', 'model': 'sonar-pro', 'created': 1742044995, 'usage': {'prompt_tokens': 12, 'completion_tokens': 356, 'total_tokens': 368}, 'object': 'chat.completion', 'choices': [{'index': 0, 'finish_reason': 'stop', 'message': {'role': 'assistant', 'content': 'The weather in Seattle is currently chilly with intervals of clouds and sun.'}}]}\nvapi_response: {'results': [{'toolCallId': 'toolu_01FDyjjUG1ig7hP9YQ6MQXhX', 'result': 'The weather in Seattle is currently chilly with intervals of clouds and sun.'}]}\n"
			},
			"teardown": { "duration": 0.00018162501510232687, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_parse_tool_call",
			"lineno": 109,
			"outcome": "passed",
			"keywords": [
				"test_parse_tool_call",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 9.970800601877272e-5, "outcome": "passed" },
			"call": { "duration": 5.295799928717315e-5, "outcome": "passed" },
			"teardown": { "duration": 0.00014120902051217854, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_make_vapi_response",
			"lineno": 118,
			"outcome": "passed",
			"keywords": [
				"test_make_vapi_response",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 9.32919792830944e-5, "outcome": "passed" },
			"call": { "duration": 4.645800800062716e-5, "outcome": "passed" },
			"teardown": { "duration": 0.00014320900663733482, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_blog_search",
			"lineno": 132,
			"outcome": "passed",
			"keywords": [
				"test_blog_search",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 8.295901352539659e-5, "outcome": "passed" },
			"call": {
				"duration": 0.1546578330162447,
				"outcome": "passed",
				"stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '142', 'content-type': 'application/json'}\n"
			},
			"teardown": { "duration": 0.00020237502758391201, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_vapi_assistant_call_input",
			"lineno": 178,
			"outcome": "passed",
			"keywords": [
				"test_vapi_assistant_call_input",
				"usefixtures",
				"pytestmark",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.00020154198864474893, "outcome": "passed" },
			"call": {
				"duration": 0.04429670801619068,
				"outcome": "passed",
				"stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '650', 'content-type': 'application/json'}\ninput: {'message': {'timestamp': 1736039875874, 'type': 'assistant-request', 'call': {'id': 'xxx-xxx', 'orgId': 'xxx-xxx', 'createdAt': '2025-01-05T01:17:55.739Z', 'updatedAt': '2025-01-05T01:17:55.739Z', 'type': 'inbound Phone Call', 'status': 'ringing', 'phoneCallProvider': 'twilio', 'phoneCallProviderId': 'xxx-xxx', 'phoneCallTransport': 'pstn', 'phoneNumberId': 'xxx-xxx', 'assistantId': None, 'squadId': None, 'customer': {'number': '+1xxx-xxx', 'phoneNumber': {'id': 'xxx-xxx', 'orgId': 'xxx-xxx', 'assistantId': None, 'number': '+1xxx-xxx', 'createdAt': '2024-04-12T16:35:14.400Z', 'updatedAt': '2024-11-27T17:14:08.833Z', 'provider': 'twilio'}}}}}\nlen(tony): 1\n"
			},
			"teardown": { "duration": 0.00021666701650246978, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_vapi_assistant_call_input_non_igor",
			"lineno": 244,
			"outcome": "passed",
			"keywords": [
				"test_vapi_assistant_call_input_non_igor",
				"usefixtures",
				"pytestmark",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.00019641598919406533, "outcome": "passed" },
			"call": {
				"duration": 0.015016290999483317,
				"outcome": "passed",
				"stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '653', 'content-type': 'application/json'}\ninput: {'message': {'timestamp': 1736039875874, 'type': 'assistant-request', 'call': {'id': 'xxx-xxx', 'orgId': 'xxx-xxx', 'createdAt': '2025-01-05T01:17:55.739Z', 'updatedAt': '2025-01-05T01:17:55.739Z', 'type': 'inbound Phone Call', 'status': 'ringing', 'phoneCallProvider': 'twilio', 'phoneCallProviderId': 'xxx-xxx', 'phoneCallTransport': 'pstn', 'phoneNumberId': 'xxx-xxx', 'assistantId': None, 'squadId': None, 'customer': {'number': '+11234567890', 'phoneNumber': {'id': 'xxx-xxx', 'orgId': 'xxx-xxx', 'assistantId': None, 'number': '+1xxx-xxx', 'createdAt': '2024-04-12T16:35:14.400Z', 'updatedAt': '2024-11-27T17:14:08.833Z', 'provider': 'twilio'}}}}}\nlen(tony): 1\n"
			},
			"teardown": { "duration": 0.00044812497799284756, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_is_igor_caller",
			"lineno": 310,
			"outcome": "passed",
			"keywords": [
				"test_is_igor_caller",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.00013033399591222405, "outcome": "passed" },
			"call": {
				"duration": 0.0005704160139430314,
				"outcome": "passed",
				"stdout": "Missing 'call' key\n"
			},
			"teardown": { "duration": 0.00018029200145974755, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_get_caller_number",
			"lineno": 325,
			"outcome": "passed",
			"keywords": [
				"test_get_caller_number",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 9.86250233836472e-5, "outcome": "passed" },
			"call": {
				"duration": 0.00040462499600835145,
				"outcome": "passed",
				"stdout": "Missing 'number' key\nMissing 'customer' key\nMissing 'call' key\nMissing 'message' key\nMissing 'message' key\nInput is None\n"
			},
			"teardown": { "duration": 0.00016229198081418872, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_apply_caller_restrictions",
			"lineno": 355,
			"outcome": "passed",
			"keywords": [
				"test_apply_caller_restrictions",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 8.699999307282269e-5, "outcome": "passed" },
			"call": { "duration": 0.0001284159952774644, "outcome": "passed" },
			"teardown": { "duration": 0.0001474579912610352, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_assistant_endpoint_logs_failure",
			"lineno": 404,
			"outcome": "passed",
			"keywords": [
				"test_assistant_endpoint_logs_failure",
				"usefixtures",
				"pytestmark",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.00015524998889304698, "outcome": "passed" },
			"call": {
				"duration": 0.013921708014095202,
				"outcome": "passed",
				"stdout": "dict(request.headers): {'host': 'testserver', 'accept': '*/*', 'accept-encoding': 'gzip, deflate', 'connection': 'keep-alive', 'user-agent': 'testclient', 'x-vapi-secret': 'test_secret', 'content-length': '415', 'content-type': 'application/json'}\ninput: {'message': {'timestamp': 1737157773126, 'type': 'status-update', 'status': 'ended', 'endedReason': 'assistant-request-returned-invalid-assistant', 'inboundPhoneCallDebuggingArtifacts': {'error': \"Couldn't Get Assistant...\", 'assistantRequestError': 'Invalid Assistant. Errors: [\\n  \"assistant.model.All fallbackModels\\'s elements must be unique\"\\n]', 'assistantRequestResponse': {'assistant': {'name': 'Tony'}}}}}\nfailure_reason: Invalid Assistant. Errors: [\n                  \"assistant.model.All fallbackModels's elements must be unique\"\n                ]\nMissing 'call' key\nMissing 'call' key\nlen(tony): 1\n"
			},
			"teardown": { "duration": 0.0001934169849846512, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_send_text_integration",
			"lineno": 443,
			"outcome": "passed",
			"keywords": [
				"test_send_text_integration",
				"asyncio",
				"pytestmark",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.0002248339878860861, "outcome": "passed" },
			"call": {
				"duration": 0.007463458983693272,
				"outcome": "passed",
				"stdout": "Twilio environment check:\nTWILIO_ACCOUNT_SID exists:, TWILIO_ACCOUNT_SID in os.environ: True\nTWILIO_AUTH_TOKEN exists:, TWILIO_AUTH_TOKEN in os.environ: True\nTWILIO_FROM_NUMBER exists:, TWILIO_FROM_NUMBER in os.environ: True\n\"TWILIO_FROM_NUMBER value:\": TWILIO_FROM_NUMBER value:\nos.environ.get(TWILIO_FROM_NUMBER): +13203734339\nSending message with params:\nTo:, to_number: +12068904339\nFrom:, os.environ[TWILIO_FROM_NUMBER]: +13203734339\nText:, text: Hello, this is a test message\n\"Twilio response:\": Twilio response:\nmessage.__dict__: {'_mock_return_value': sentinel.DEFAULT, '_mock_parent': None, '_mock_name': None, '_mock_new_name': '()', '_mock_new_parent': <Mock name='Client().messages.create' id='4399844816'>, '_mock_sealed': False, '_spec_class': None, '_spec_set': None, '_spec_signature': None, '_mock_methods': None, '_spec_asyncs': [], '_mock_children': {}, '_mock_wraps': None, '_mock_delegate': None, '_mock_called': False, '_mock_call_args': None, '_mock_call_count': 0, '_mock_call_args_list': [], '_mock_mock_calls': [], 'method_calls': [], '_mock_unsafe': False, '_mock_side_effect': None, 'sid': 'SM12345'}\nTwilio environment check:\nTWILIO_ACCOUNT_SID exists:, TWILIO_ACCOUNT_SID in os.environ: True\nTWILIO_AUTH_TOKEN exists:, TWILIO_AUTH_TOKEN in os.environ: True\nTWILIO_FROM_NUMBER exists:, TWILIO_FROM_NUMBER in os.environ: True\n\"TWILIO_FROM_NUMBER value:\": TWILIO_FROM_NUMBER value:\nos.environ.get(TWILIO_FROM_NUMBER): +13203734339\nerror_msg: Unexpected error: Connection error\n"
			},
			"teardown": { "duration": 0.00020020801457576454, "outcome": "passed" }
		},
		{
			"nodeid": "tests/integration/test_tony_server.py::test_send_text_ifttt_integration",
			"lineno": 536,
			"outcome": "passed",
			"keywords": [
				"test_send_text_ifttt_integration",
				"asyncio",
				"pytestmark",
				"test_tony_server.py",
				"integration",
				"tests",
				"tony_tesla",
				""
			],
			"setup": { "duration": 0.00014504199498333037, "outcome": "passed" },
			"call": {
				"duration": 0.09136445901822299,
				"outcome": "passed",
				"stdout": "IFTTT environment check:\nIFTTT_WEBHOOK_KEY exists:, IFTTT_WEBHOOK_KEY in os.environ: True\n\"IFTTT_WEBHOOK_SMS_EVENT exists:\": IFTTT_WEBHOOK_SMS_EVENT exists:\nIFTTT_WEBHOOK_SMS_EVENT in os.environ: True\nSending IFTTT webhook request:\n\"URL:\": URL:\nifttt_url: https://maker.ifttt.com/trigger/test_event/with/key/test_key\n\"Payload:\": Payload:\npayload: {'value1': 'Hello, this is a test message', 'value2': '+12068904339', 'value3': 'From Tony Tesla at 2025-03-15 06:37:05'}\nIFTTT response status:, response.status_code: 200\n\"IFTTT response text:\": IFTTT response text:\nresponse.text: Congratulations! You've fired the sms_event event\nIFTTT environment check:\nIFTTT_WEBHOOK_KEY exists:, IFTTT_WEBHOOK_KEY in os.environ: True\n\"IFTTT_WEBHOOK_SMS_EVENT exists:\": IFTTT_WEBHOOK_SMS_EVENT exists:\nIFTTT_WEBHOOK_SMS_EVENT in os.environ: True\nSending IFTTT webhook request:\n\"URL:\": URL:\nifttt_url: https://maker.ifttt.com/trigger/test_event/with/key/test_key\n\"Payload:\": Payload:\npayload: {'value1': 'Hello, this is a test message', 'value2': '+12068904339', 'value3': 'From Tony Tesla at 2025-03-15 06:37:05'}\nerror_msg: Failed to send webhook request: Connection failed\nIFTTT environment check:\nIFTTT_WEBHOOK_KEY exists:, IFTTT_WEBHOOK_KEY in os.environ: True\n\"IFTTT_WEBHOOK_SMS_EVENT exists:\": IFTTT_WEBHOOK_SMS_EVENT exists:\nIFTTT_WEBHOOK_SMS_EVENT in os.environ: True\nSending IFTTT webhook request:\nURL:, ifttt_url: https://maker.ifttt.com/trigger/test_event/with/key/\n\"Payload:\": Payload:\npayload: {'value1': 'Hello, this is a test message', 'value2': '+12068904339', 'value3': 'From Tony Tesla at 2025-03-15 06:37:05'}\nerror_msg: Failed to send webhook request: 404 Client Error: Not Found for url: https://maker.ifttt.com/trigger/test_event/with/key/\n"
			},
			"teardown": { "duration": 0.00027420901460573077, "outcome": "passed" }
		}
	]
}
